package "rami3l/cmark/cmark"

import(
  "moonbitlang/core/json"
  "rami3l/cmark/cmark_base"
)

// Values
let layout_empty : Node[String]

fn layout_of_string(meta~ : @cmark_base.Meta = .., String) -> Node[String]

fn tex(InlineMathSpan) -> String

// Types and methods
pub(all) enum Block {
  BlankLine(Node[String])
  BlockQuote(Node[BlockQuote])
  Blocks(Node[Seq[Block]])
  CodeBlock(Node[CodeBlock])
  Heading(Node[BlockHeading])
  HtmlBlock(Node[HtmlBlock])
  LinkRefDefinition(Node[LinkDefinition])
  List(Node[BlockList])
  Paragraph(Node[BlockParagraph])
  ThematicBreak(Node[BlockThematicBreak])
  ExtMathBlock(Node[CodeBlock])
  ExtTable(Node[Table])
  ExtFootnoteDefinition(Node[Footnote])
}
fn Block::defs(Self, init~ : Map[String, LabelDef] = ..) -> Map[String, LabelDef]
fn Block::empty() -> Self
fn Block::meta(Self) -> @cmark_base.Meta
fn Block::normalize(Self) -> Self
impl Show for Block
impl ToJson for Block

pub(all) struct BlockHeading {
  layout : BlockHeadingLayout
  level : Int
  inline : Inline
  id : BlockHeadingId?
}
fn BlockHeading::new(id~ : BlockHeadingId? = .., layout~ : BlockHeadingLayout = .., level~ : Int, Inline) -> Self
impl Show for BlockHeading
impl ToJson for BlockHeading

pub(all) struct BlockHeadingAtxLayout {
  indent : Int
  after_opening : String
  closing : String
}
fn BlockHeadingAtxLayout::default() -> Self
impl Show for BlockHeadingAtxLayout
impl ToJson for BlockHeadingAtxLayout
impl @json.FromJson for BlockHeadingAtxLayout

pub(all) enum BlockHeadingId {
  Auto(String)
  Id(String)
}
impl Show for BlockHeadingId
impl ToJson for BlockHeadingId
impl @json.FromJson for BlockHeadingId

pub(all) enum BlockHeadingLayout {
  Atx(BlockHeadingAtxLayout)
  Setext(BlockHeadingSetextLayout)
}
impl Show for BlockHeadingLayout
impl ToJson for BlockHeadingLayout

pub(all) struct BlockHeadingSetextLayout {
  leading_indent : Int
  trailing_blanks : String
  underline_indent : Int
  underline_count : Node[Int]
  underline_blanks : String
}
impl Show for BlockHeadingSetextLayout
impl ToJson for BlockHeadingSetextLayout

pub(all) type BlockLine Node[String]
fn BlockLine::list_text_loc(Seq[Self]) -> @cmark_base.TextLoc
fn BlockLine::to_string(Self) -> String

pub(all) struct BlockList {
  ty : @cmark_base.ListType
  tight : Bool
  items : Seq[Node[ListItem]]
}
fn BlockList::map_items(Self, (ListItem) -> ListItem) -> Self
fn BlockList::normalize_items(Self) -> Self
impl Show for BlockList
impl ToJson for BlockList

pub(all) struct BlockParagraph {
  leading_indent : Int
  inline : Inline
  trailing_blanks : String
}
fn BlockParagraph::new(leading_indent~ : Int = .., trailing_blanks~ : String = .., Inline) -> Self
impl Show for BlockParagraph
impl ToJson for BlockParagraph

pub(all) struct BlockQuote {
  indent : Int
  block : Block
}
fn BlockQuote::map_block(Self, (Block) -> Block) -> Self
fn BlockQuote::new(indent~ : Int = .., Block) -> Self
fn BlockQuote::normalize_block(Self) -> Self
impl Show for BlockQuote
impl ToJson for BlockQuote

pub(all) struct BlockThematicBreak {
  indent : Int
  layout : String
}
fn BlockThematicBreak::new(indent~ : Int = .., layout~ : String = ..) -> Self
impl Show for BlockThematicBreak
impl ToJson for BlockThematicBreak
impl @json.FromJson for BlockThematicBreak

pub(all) struct CodeBlock {
  layout : CodeBlockLayout
  info_string : Node[String]?
  code : Seq[Node[String]]
}
fn CodeBlock::language_of_info_string(String) -> (String, String)?
fn CodeBlock::make_fence(Self) -> (Char, Int)
fn CodeBlock::new(layout~ : CodeBlockLayout = .., info_string~ : Node[String]? = .., Seq[Node[String]]) -> Self
impl Show for CodeBlock
impl ToJson for CodeBlock

pub(all) struct CodeBlockFencedLayout {
  indent : Int
  opening_fence : Node[String]
  closing_fence : Node[String]?
}
fn CodeBlockFencedLayout::default() -> Self
impl Show for CodeBlockFencedLayout
impl ToJson for CodeBlockFencedLayout

pub(all) enum CodeBlockLayout {
  Indented
  Fenced(CodeBlockFencedLayout)
}
impl Show for CodeBlockLayout
impl ToJson for CodeBlockLayout

pub(all) struct Doc {
  nl : String
  block : Block
  defs : Map[String, LabelDef]
}
fn Doc::empty() -> Self
fn Doc::from_string(defs~ : Map[String, LabelDef] = .., resolver~ : LabelResolverFn = .., nested_links~ : Bool = .., heading_auto_ids~ : Bool = .., layout~ : Bool = .., locs~ : Bool = .., file~ : String = .., strict~ : Bool = .., String) -> Self
fn Doc::new(nl~ : String = .., defs~ : Map[String, LabelDef] = .., Block) -> Self
impl Show for Doc
impl ToJson for Doc

pub(all) type FoldFn[A, B] (Folder[B], B, A) -> B raise FolderError

pub(all) struct Folder[A] {
  inline_ext_default : FoldFn[Inline, A]
  block_ext_default : FoldFn[Block, A]
  inline : FolderFn[Inline, A]
  block : FolderFn[Block, A]
}
fn[A] Folder::block_ext_none(Self[A], A, Block) -> A raise FolderError
fn[A] Folder::fold_block(Self[A], A, Block) -> A raise FolderError
fn[A] Folder::fold_doc(Self[A], A, Doc) -> A raise FolderError
fn[A] Folder::fold_inline(Self[A], A, Inline) -> A raise FolderError
fn[A] Folder::inline_ext_none(Self[A], A, Inline) -> A raise FolderError
fn[A] Folder::new(inline_ext_default~ : FoldFn[Inline, A] = .., block_ext_default~ : FoldFn[Block, A] = .., inline~ : FolderFn[Inline, A] = .., block~ : FolderFn[Block, A] = ..) -> Self[A]
fn[A, B] Folder::none(Self[A], A, B) -> FolderResult[A]
fn[A] Folder::ret(A) -> FolderResult[A]

pub(all) suberror FolderError String
impl Show for FolderError

pub(all) type FolderFn[A, B] (Folder[B], B, A) -> FolderResult[B]

pub(all) enum FolderResult[A] {
  Default
  Fold(A)
}
impl[A] Default for FolderResult[A]
impl[A : Eq] Eq for FolderResult[A]
impl[A : Show] Show for FolderResult[A]
impl[A : ToJson] ToJson for FolderResult[A]

pub(all) struct Footnote {
  indent : Int
  label : Label
  defined_label : Label?
  block : Block
}
fn Footnote::map_block(Self, (Block) -> Block) -> Self
fn Footnote::new(indent~ : Int = .., defined_label? : Label?, Label, Block) -> Self
fn Footnote::normalize_block(Self) -> Self
impl Show for Footnote
impl ToJson for Footnote

pub(all) type HtmlBlock Seq[Node[String]]
impl Show for HtmlBlock
impl ToJson for HtmlBlock

pub(all) enum Inline {
  Autolink(Node[InlineAutolink])
  Break(Node[InlineBreak])
  CodeSpan(Node[InlineCodeSpan])
  Emphasis(Node[InlineEmphasis])
  Image(Node[InlineLink])
  Inlines(Node[Seq[Inline]])
  Link(Node[InlineLink])
  RawHtml(Node[InlineRawHtml])
  StrongEmphasis(Node[InlineEmphasis])
  Text(Node[String])
  ExtStrikethrough(Node[InlineStrikethrough])
  ExtMathSpan(Node[InlineMathSpan])
}
fn Inline::empty() -> Self
fn Inline::id(Self, buf~ : StringBuilder = ..) -> String
fn Inline::is_empty(Self) -> Bool
fn Inline::meta(Self) -> @cmark_base.Meta
fn Inline::normalize(Self) -> Self
fn Inline::to_plain_text(Self, break_on_soft~ : Bool) -> Seq[Seq[String]]
impl Eq for Inline
impl Show for Inline
impl ToJson for Inline

pub(all) struct InlineAutolink {
  is_email : Bool
  link : Node[String]
}
fn InlineAutolink::new(Node[String]) -> Self
impl Eq for InlineAutolink
impl Show for InlineAutolink
impl ToJson for InlineAutolink

pub(all) struct InlineBreak {
  layout_before : Node[String]
  ty : InlineBreakType
  layout_after : Node[String]
}
fn InlineBreak::new(layout_before~ : Node[String] = .., layout_after~ : Node[String] = .., InlineBreakType) -> Self
impl Eq for InlineBreak
impl Show for InlineBreak
impl ToJson for InlineBreak

pub(all) enum InlineBreakType {
  Hard
  Soft
}
impl Compare for InlineBreakType
impl Eq for InlineBreakType
impl Show for InlineBreakType
impl ToJson for InlineBreakType
impl @json.FromJson for InlineBreakType

pub(all) struct InlineCodeSpan {
  backticks : Int
  code_layout : Seq[Tight]
}
fn InlineCodeSpan::code(Self) -> String
fn InlineCodeSpan::from_string(meta~ : @cmark_base.Meta = .., String) -> Self
fn InlineCodeSpan::new(backticks~ : Int, Seq[Tight]) -> Self
impl Eq for InlineCodeSpan
impl Show for InlineCodeSpan
impl ToJson for InlineCodeSpan

pub(all) struct InlineEmphasis {
  delim : Char
  inline : Inline
}
fn InlineEmphasis::new(delim~ : Char = .., Inline) -> Self
impl Eq for InlineEmphasis
impl Show for InlineEmphasis
impl ToJson for InlineEmphasis

pub(all) struct InlineLink {
  text : Inline
  reference : ReferenceKind
}
fn InlineLink::is_unsafe(String) -> Bool
fn InlineLink::new(Inline, ReferenceKind) -> Self
fn InlineLink::reference_definition(Self, Map[String, LabelDef]) -> LabelDef?
fn InlineLink::referenced_label(Self) -> Label?
impl Eq for InlineLink
impl Show for InlineLink
impl ToJson for InlineLink

pub(all) struct InlineMathSpan {
  display : Bool
  tex_layout : Seq[Tight]
}
fn InlineMathSpan::tex(Self) -> String
impl Eq for InlineMathSpan
impl Show for InlineMathSpan
impl ToJson for InlineMathSpan

pub(all) type InlineRawHtml Seq[Tight]
impl Eq for InlineRawHtml
impl Show for InlineRawHtml
impl ToJson for InlineRawHtml

pub(all) type InlineStrikethrough Inline
impl Eq for InlineStrikethrough
impl Show for InlineStrikethrough
impl ToJson for InlineStrikethrough

pub(all) struct Label {
  meta : @cmark_base.Meta
  key : String
  text : Seq[Tight]
}
fn Label::compare(Self, Self) -> Int
fn Label::new(meta~ : @cmark_base.Meta = .., key~ : String, Seq[Tight]) -> Self
fn Label::text_loc(Self) -> @cmark_base.TextLoc
impl Eq for Label
impl Show for Label
impl ToJson for Label

pub(all) enum LabelContext {
  Def(Label?, Label)
  Ref(LinkKind, Label, Label?)
}
fn LabelContext::default_resolver(Self) -> Label?

pub(all) enum LabelDef {
  LinkDef(Node[LinkDefinition])
  FootnoteDef(Node[Footnote])
}
impl Show for LabelDef
impl ToJson for LabelDef

pub(all) type LabelResolverFn (LabelContext) -> Label?

pub(all) struct LinkDefinition {
  layout : LinkDefinitionLayout
  label : Label?
  defined_label : Label?
  dest : Node[String]?
  title : Seq[Tight]?
}
fn LinkDefinition::new(layout~ : LinkDefinitionLayout = .., label~ : Label? = .., defined_label~ : Label? = .., dest~ : Node[String]? = .., title~ : Seq[Tight]? = ..) -> Self
impl Eq for LinkDefinition
impl Show for LinkDefinition
impl ToJson for LinkDefinition

pub(all) struct LinkDefinitionLayout {
  indent : Int
  angled_dest : Bool
  before_dest : Seq[Node[String]]
  after_dest : Seq[Node[String]]
  title_open_delim : Char
  after_title : Seq[Node[String]]
}
fn LinkDefinitionLayout::default() -> Self
fn LinkDefinitionLayout::for_dest(String) -> Self
impl Eq for LinkDefinitionLayout
impl Show for LinkDefinitionLayout
impl ToJson for LinkDefinitionLayout

pub(all) enum LinkKind {
  Link
  Image
}

pub(all) struct ListItem {
  before_marker : Int
  marker : Node[String]
  after_marker : Int
  block : Block
  ext_task_marker : Node[Char]?
}
fn ListItem::map_block(Self, (Block) -> Block) -> Self
fn ListItem::new(before_marker~ : Int = .., marker~ : Node[String] = .., after_marker~ : Int = .., ext_task_marker~ : Node[Char]?, Block) -> Self
fn ListItem::normalize_block(Self) -> Self
impl Show for ListItem
impl ToJson for ListItem

pub(all) enum ListTaskStatus {
  Cancelled
  Checked
  Unchecked
  Other(Char)
}
fn ListTaskStatus::from_marker(Char) -> Self

pub(all) type MapFn[A] (Mapper, A) -> A? raise MapperError

pub(all) struct Mapper {
  inline_ext_default : MapFn[Inline]
  block_ext_default : MapFn[Block]
  inline : MapperFn[Inline]
  block : MapperFn[Block]
}
fn[A] Mapper::block_ext_none(Self, A) -> A? raise MapperError
fn[A] Mapper::delete() -> MapperResult[A]
fn[A] Mapper::inline_ext_none(Self, A) -> A? raise MapperError
fn Mapper::map_block(Self, Block) -> Block?
fn Mapper::map_doc(Self, Doc) -> Doc
fn Mapper::map_inline(Self, Inline) -> Inline?
fn Mapper::new(inline_ext_default~ : MapFn[Inline] = .., block_ext_default~ : MapFn[Block] = .., inline~ : MapperFn[Inline] = .., block~ : MapperFn[Block] = ..) -> Self
fn[A] Mapper::none(Self, A) -> MapperResult[A]
fn[A] Mapper::ret(A) -> MapperResult[A]

pub(all) suberror MapperError String
impl Show for MapperError

pub(all) type MapperFn[A] (Mapper, A) -> MapperResult[A]

pub(all) enum MapperResult[A] {
  Default
  Map(A?)
}
impl[A] Default for MapperResult[A]
impl[A : Eq] Eq for MapperResult[A]
impl[A : Show] Show for MapperResult[A]
impl[A : ToJson] ToJson for MapperResult[A]

pub(all) struct Node[A] {
  v : A
  meta : @cmark_base.Meta
}
fn Node::empty(meta~ : @cmark_base.Meta = ..) -> Self[String]
fn[A, B] Node::map(Self[A], (A) -> B) -> Self[B]
fn[A] Node::new(A, meta~ : @cmark_base.Meta = ..) -> Self[A]
impl[A : Eq] Eq for Node[A]
impl[A : Show] Show for Node[A]
impl[A : ToJson] ToJson for Node[A]

pub(all) enum ReferenceKind {
  Inline(Node[LinkDefinition])
  Ref(ReferenceLayout, Label, Label)
}
impl Eq for ReferenceKind
impl Show for ReferenceKind
impl ToJson for ReferenceKind

pub(all) enum ReferenceLayout {
  Collapsed
  Full
  Shortcut
}
impl Eq for ReferenceLayout
impl Show for ReferenceLayout
impl ToJson for ReferenceLayout
impl @json.FromJson for ReferenceLayout

type Seq[A]
fn[A] Seq::empty() -> Self[A]
fn[A, B] Seq::fold(Self[A], init~ : B, (B, A) -> B) -> B
fn[A] Seq::from_array(Array[A]) -> Self[A]
fn[A] Seq::from_iter(Iter[A]) -> Self[A]
fn[A] Seq::get(Self[A], Int) -> A?
fn[A] Seq::is_empty(Self[A]) -> Bool
fn[A] Seq::iter(Self[A]) -> Iter[A]
fn[A] Seq::length(Self[A]) -> Int
fn[A, B] Seq::map(Self[A], (A) -> B) -> Self[B]
fn[A] Seq::op_get(Self[A], Int) -> A
fn[A] Seq::op_set(Self[A], Int, A) -> Unit
fn[A, B] Seq::rev_fold(Self[A], init~ : B, (B, A) -> B) -> B
fn[A] Seq::to_array(Self[A]) -> Array[A]
impl[A : Eq] Eq for Seq[A]
impl[A : Show] Show for Seq[A]
impl[A : ToJson] ToJson for Seq[A]

pub(all) struct Table {
  indent : Int
  col_count : Int
  rows : Seq[(Node[TableRow], String)]
}
fn Table::new(indent~ : Int = .., Seq[(Node[TableRow], String)]) -> Self
impl Show for Table
impl ToJson for Table

pub(all) enum TableAlign {
  Left
  Center
  Right
}
impl Show for TableAlign
impl ToJson for TableAlign
impl @json.FromJson for TableAlign

pub(all) type TableCellLayout (String, String)
impl Compare for TableCellLayout
impl Eq for TableCellLayout
impl Show for TableCellLayout
impl ToJson for TableCellLayout

pub(all) enum TableRow {
  Header(Seq[(Inline, TableCellLayout)])
  Sep(Seq[Node[TableSep]])
  Data(Seq[(Inline, TableCellLayout)])
}
impl Show for TableRow
impl ToJson for TableRow

pub(all) type TableSep (TableAlign?, Int)
impl Show for TableSep
impl ToJson for TableSep

pub(all) struct Tight {
  blanks : String
  node : Node[String]
}
fn Tight::empty(meta~ : @cmark_base.Meta = ..) -> Self
fn Tight::list_text_loc(Seq[Self]) -> @cmark_base.TextLoc
fn Tight::to_string(Self) -> String
impl Eq for Tight
impl Show for Tight
impl ToJson for Tight

// Type aliases
pub typealias Blanks = String

pub typealias BlanksNode = Node[String]

pub typealias BlockBlankLine = String

pub typealias BlockLineBlank = Node[String]

pub typealias Count = Int

pub typealias InlineText = String

pub typealias LabelDefs = Map[String, LabelDef]

pub typealias LabelKey = String

pub typealias ListItemBlock = ListItem

pub typealias StringNode = Node[String]

// Traits

