package "rami3l/cmark/cmark_base"

import(
  "moonbitlang/core/json"
)

// Values
fn autolink_email(String, last~ : Int = .., start~ : Int = ..) -> Int?

fn autolink_uri(String, last~ : Int = .., start~ : Int = ..) -> Int?

let char_code_pos_none : Int

fn could_be_link_ref_definition(String, last~ : Int, start~ : Int) -> Bool

fn ext_task_marker(String, last~ : Int, start~ : Int) -> (Char, Int)?

let file_path_none : String

fn first_non_blank(String, last~ : Int, start~ : Int) -> Int

fn first_non_blank_in_span(String, LineSpan) -> Int

fn[A] first_non_blank_over_nl(next_line~ : NextLineFn[A], String, A, line~ : LineSpan, start~ : Int) -> NextLineResult?

fn first_non_escaped_char(Char, String, last~ : Int, start~ : Int) -> Int

fn last_non_blank(String, first~ : Int, start~ : Int) -> Int

let line_num_none : Int

let line_pos_none : LinePos

fn link_destination(String, last~ : Int, start~ : Int) -> (Bool, Int, Int)?

fn[A] link_label(StringBuilder, next_line~ : NextLineFn[A], String, A, line~ : LineSpan, start~ : Int) -> (LineSpan, Array[Span], Int, String)?

fn[A] link_title(next_line~ : NextLineFn[A], String, A, line~ : LineSpan, start~ : Int) -> (LineSpan, Array[Span], Int)?

fn[A : Show] raw_html(next_line~ : NextLineFn[A], String, A, line~ : LineSpan, start~ : Int) -> (LineSpan, Array[Span], Int)?

fn rev_drop_spaces(String, first~ : Int, start~ : Int) -> Int

fn run_of(char~ : Char, String, last~ : Int, start~ : Int) -> Int

// Types and methods
pub(all) enum FencedCodeBlockContinue {
  Close(Int, Int)
  Code
}
fn FencedCodeBlockContinue::new(String, fence~ : (Char, Int), last~ : Int, start~ : Int) -> Self
impl Show for FencedCodeBlockContinue
impl ToJson for FencedCodeBlockContinue

pub(all) enum HtmlBlockEndCond {
  EndStr(String)
  EndCond1
  EndBlank
  EndBlank7
}
impl Eq for HtmlBlockEndCond
impl Show for HtmlBlockEndCond
impl ToJson for HtmlBlockEndCond

pub(all) type LinePos (Int, Int)
fn LinePos::inner(Self) -> (Int, Int)
impl Compare for LinePos
impl Eq for LinePos
impl Show for LinePos
impl ToJson for LinePos
impl @json.FromJson for LinePos

pub(all) struct LineSpan {
  pos : LinePos
  first : Int
  last : Int
}
impl Compare for LineSpan
impl Eq for LineSpan
impl Show for LineSpan
impl ToJson for LineSpan

pub(all) enum LineType {
  AtxHeadingLine(Int, Int, Int, Int)
  BlankLine
  BlockQuoteLine
  FencedCodeBlockLine(Int, Int, (Int, Int)?)
  HtmlBlockLine(HtmlBlockEndCond)
  IndentedCodeBlockLine
  ListMarkerLine(ListType, Int)
  ParagraphLine
  SetextUnderlineLine(Int, Int)
  ThematicBreakLine(Int)
  ExtTableRow(Int)
  ExtFootnoteLabel(Array[Span], Int, String)
  Nomatch
}
fn LineType::atx_heading(String, last~ : Int, start~ : Int) -> Self
fn LineType::ext_footnote_label(StringBuilder, String, line_pos~ : LinePos, last~ : Int, start~ : Int) -> Self
fn LineType::ext_table_row(String, last~ : Int, start~ : Int) -> Self
fn LineType::fenced_code_block_start(String, last~ : Int, start~ : Int) -> Self
fn LineType::html_block_end(String, end_cond~ : HtmlBlockEndCond, last~ : Int, start~ : Int) -> Bool
fn LineType::html_block_start(String, last~ : Int, start~ : Int) -> Self
fn LineType::list_marker(String, last~ : Int, start~ : Int) -> Self
fn LineType::setext_heading_underline(String, last~ : Int, start~ : Int) -> Self
fn LineType::thematic_break(String, last~ : Int, start~ : Int) -> Self
impl Eq for LineType
impl Show for LineType
impl ToJson for LineType

pub(all) enum ListType {
  Unordered(Char)
  Ordered(Int, Char)
}
fn ListType::is_same_type(Self, Self) -> Bool
impl Eq for ListType
impl Show for ListType
impl ToJson for ListType
impl @json.FromJson for ListType

pub(all) struct Meta {
  id : Int
  loc : TextLoc
  extra : Error?
}
fn Meta::compare(Self, Self) -> Int
fn Meta::is_none(Self) -> Bool
fn Meta::new(loc~ : TextLoc = ..) -> Self
fn Meta::none() -> Self
fn Meta::to_json(Self) -> Json
impl Eq for Meta
impl Show for Meta
impl ToJson for Meta

pub(all) type NextLineFn[A] (A) -> LineSpan?
fn[A] NextLineFn::inner(Self[A]) -> (A) -> LineSpan?

pub(all) enum NextLineResult {
  ThisLine(Int)
  NextLine(LineSpan, Int)
}
impl Show for NextLineResult
impl ToJson for NextLineResult

pub(all) struct Span {
  start : Int
  span : LineSpan
}
impl Compare for Span
impl Eq for Span
impl Show for Span
impl ToJson for Span

pub(all) struct TextLoc {
  file : String
  first_ccode : Int
  last_ccode : Int
  first_line : LinePos
  last_line : LinePos
}
fn TextLoc::after(Self) -> Self
fn TextLoc::is_empty(Self) -> Bool
fn TextLoc::is_none(Self) -> Bool
fn TextLoc::none() -> Self
fn TextLoc::reloc(Self, Self) -> Self
fn TextLoc::span(Self, Self) -> Self
fn TextLoc::to_first(Self) -> Self
fn TextLoc::to_last(Self) -> Self
impl Compare for TextLoc
impl Eq for TextLoc
impl Show for TextLoc
impl ToJson for TextLoc
impl @json.FromJson for TextLoc

// Type aliases
pub typealias Int as CharCodePos

pub typealias String as FilePath

pub typealias Int as First

pub typealias Int as HeadingLevel

pub typealias Int as Indent

pub typealias Int as Last

pub typealias Int as LineNum

pub typealias Int as Next

// Traits

