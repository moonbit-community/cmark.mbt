package "rami3l/cmark/char"

import(
  "moonbitlang/core/string"
)

// Values
fn ascii_digit_to_int(Char) -> Int

fn ascii_hexdigit_to_int(Char) -> Int

fn ascii_octdigit_to_int(Char) -> Int

fn at_checked(@string.StringView, Int) -> Result[Char, Int]

fn is_ascii_alphanum(Char) -> Bool

fn is_ascii_blank(Char) -> Bool

fn is_ascii_control(Char) -> Bool

fn is_ascii_graphic(Char) -> Bool

fn is_ascii_punctuation(Char) -> Bool

fn is_ascii_whitespace(Char) -> Bool

fn length_utf16(Int) -> Int

fn length_utf32(Int) -> Int

fn length_utf8(Int) -> Int

fn next_char(@string.StringView, last~ : Int, after~ : Int) -> Char

fn prev_char(@string.StringView, first~ : Int, before~ : Int) -> Char

let rep : Char

fn sub_includes(affix~ : String, String, first~ : Int, last~ : Int) -> Bool

fn to_ascii_lower(Char) -> Char

fn to_ascii_upper(Char) -> Char

fn utf_16_clean_raw(pad~ : Int = .., StringBuilder, String, first~ : Int, last~ : Int) -> String

fn utf_16_clean_unesc_unref(StringBuilder, String, first~ : Int, last~ : Int) -> String

fn utf_16_clean_unref(StringBuilder, String, first~ : Int, last~ : Int) -> String

// Types and methods

// Type aliases

// Traits

