package "rami3l/cmark/cmark_renderer"

import(
  "rami3l/cmark/cmark"
)

// Values

// Types and methods
pub(all) type BlockFn (Context, @cmark.Block) -> Bool!

pub(all) struct Context {
  renderer : Renderer
  mut state : Error?
  b : StringBuilder
  mut doc : @cmark.Doc
}
fn Context::block(Self, @cmark.Block) -> Unit!
fn Context::char(Self, Char) -> Unit
fn Context::doc(Self, @cmark.Doc) -> Unit!
fn Context::init(Self, @cmark.Doc) -> Unit
fn Context::inline(Self, @cmark.Inline) -> Unit!
fn Context::new(Renderer, StringBuilder) -> Self
fn Context::string(Self, String) -> Unit

pub(all) type DocFn (Context, @cmark.Doc) -> Bool!

pub(all) type InitContextFn (Context, @cmark.Doc) -> Unit

pub(all) type InlineFn (Context, @cmark.Inline) -> Bool!

pub(all) type! RenderError String
impl Show for RenderError

pub(all) struct Renderer {
  init_context : InitContextFn
  inline : InlineFn
  block : BlockFn
  doc : DocFn
}
fn Renderer::buffer_add_doc(Self, StringBuilder, @cmark.Doc) -> Unit!
fn Renderer::compose(Self, Self) -> Self
fn Renderer::doc_to_string(Self, @cmark.Doc) -> String!
fn Renderer::new(init_context~ : InitContextFn = .., inline~ : InlineFn = .., block~ : BlockFn = .., doc~ : DocFn = ..) -> Self

// Type aliases

// Traits

